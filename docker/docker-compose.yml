version: '2.1'

services:
  app:
    image: 'network:latest'
    build:
      context: .
    ports:
      - "8080:8080"
    container_name: highload
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_started
    environment:
      - POSTGRES_URL=jdbc:postgresql://db:5432/postgres
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=postgres
      - REDIS_URL=redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_URL=kafka:9092

  db:
    image: 'postgres:16-alpine'
    container_name: db
    ports:
      - "8083:5432"
    volumes:
      - ./postgres-dump.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres -d postgres'" ]
      interval: 20s
      timeout: 3s
      retries: 3

  redis:
    image: 'redis:7.2.1'
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
